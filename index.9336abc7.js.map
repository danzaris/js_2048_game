{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.board.length; i++){\n            for(let j = 0; j < this.board[i].length; j++)if (this.board[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.board[row][col] = Math.random() < 0.1 ? 4 : 2;\n        }\n    }\n    checkWinCondition() {\n        for (const row of this.board)if (row.includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n    }\n    checkLoseCondition() {\n        for (const row of this.board){\n            if (row.includes(0)) return;\n        }\n        for(let i = 0; i < this.board.length; i++)for(let j = 0; j < this.board[i].length - 1; j++){\n            if (this.board[i][j] === this.board[i][j + 1]) return;\n        }\n        for(let j = 0; j < this.board[0].length; j++)for(let i = 0; i < this.board.length - 1; i++){\n            if (this.board[i][j] === this.board[i + 1][j]) return;\n        }\n        this.status = \"lose\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const currentRow = [\n                ...this.board[row]\n            ];\n            let newRow = currentRow.filter((value)=>value !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            if (currentRow.toString() !== newRow.toString()) moved = true;\n            this.board[row] = newRow;\n        }\n        if (moved) this.addRandomTile();\n        this.checkWinCondition();\n        this.checkLoseCondition();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const currentRow = [\n                ...this.board[row]\n            ];\n            let newRow = currentRow.filter((value)=>value !== 0);\n            for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i - 1] = 0;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.unshift(0);\n            if (currentRow.toString() !== newRow.toString()) moved = true;\n            this.board[row] = newRow;\n        }\n        if (moved) this.addRandomTile();\n        this.checkWinCondition();\n        this.checkLoseCondition();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const column = [\n                this.board[0][col],\n                this.board[1][col],\n                this.board[2][col],\n                this.board[3][col]\n            ];\n            const oldColumn = [\n                ...column\n            ];\n            let newColumn = column.filter((value)=>value !== 0);\n            for(let i = 0; i < newColumn.length - 1; i++)if (newColumn[i] === newColumn[i + 1]) {\n                newColumn[i] *= 2;\n                this.score += newColumn[i];\n                newColumn[i + 1] = 0;\n            }\n            newColumn = newColumn.filter((value)=>value !== 0);\n            while(newColumn.length < 4)newColumn.push(0);\n            if (oldColumn.toString() !== newColumn.toString()) moved = true;\n            for(let row = 0; row < 4; row++)this.board[row][col] = newColumn[row];\n        }\n        if (moved) this.addRandomTile();\n        this.checkWinCondition();\n        this.checkLoseCondition();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const column = [\n                this.board[0][col],\n                this.board[1][col],\n                this.board[2][col],\n                this.board[3][col]\n            ];\n            let newColumn = column.filter((value)=>value !== 0);\n            for(let i = newColumn.length - 1; i > 0; i--)if (newColumn[i] === newColumn[i - 1]) {\n                newColumn[i] *= 2;\n                this.score += newColumn[i];\n                newColumn[i - 1] = 0;\n            }\n            newColumn = newColumn.filter((value)=>value !== 0);\n            while(newColumn.length < 4)newColumn.unshift(0);\n            const oldColumn = [\n                this.board[0][col],\n                this.board[1][col],\n                this.board[2][col],\n                this.board[3][col]\n            ];\n            if (oldColumn.toString() !== newColumn.toString()) moved = true;\n            for(let row = 0; row < 4; row++)this.board[row][col] = newColumn[row];\n        }\n        if (moved) this.addRandomTile();\n        this.checkWinCondition();\n        this.checkLoseCondition();\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    reset() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    hasValidMoves() {\n        if (this.board.some((row)=>row.includes(0))) return true;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const value = this.board[row][col];\n            if (col < 3 && value === this.board[row][col + 1]) return true;\n            if (row < 3 && value === this.board[row + 1][col]) return true;\n        }\n        return false;\n    }\n    checkWin() {\n        for(let row = 0; row < 4; row++)if (this.board[row].includes(2048)) {\n            this.status = \"won\";\n            return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$gameBoardElement = document.getElementById(\"game-board\");\nfunction $09e991522ca7e64e$var$updateScore(score) {\n    const scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = `${score}`;\n}\nfunction $09e991522ca7e64e$var$renderBoard(board) {\n    $09e991522ca7e64e$var$gameBoardElement.innerHTML = \"\";\n    board.forEach((row)=>{\n        const rowElement = document.createElement(\"tr\");\n        rowElement.classList.add(\"row\");\n        row.forEach((cell)=>{\n            const cellElement = document.createElement(\"td\");\n            cellElement.classList.add(\"cell\");\n            cellElement.textContent = cell !== 0 ? cell : \"\";\n            rowElement.appendChild(cellElement);\n        });\n        $09e991522ca7e64e$var$gameBoardElement.appendChild(rowElement);\n    });\n    $09e991522ca7e64e$var$updateTileStyles(board);\n}\nfunction $09e991522ca7e64e$var$updateTileStyles(board) {\n    const cells = document.querySelectorAll(\".cell\");\n    board.forEach((row, rowIndex)=>{\n        row.forEach((value, colIndex)=>{\n            const cell = cells[rowIndex * 4 + colIndex];\n            cell.className = \"cell\";\n            if (value > 0) {\n                cell.classList.add(`cell--${value}`);\n                cell.textContent = value;\n            } else cell.textContent = \"\";\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$updateMessage(s) {\n    const loseMessage = document.querySelector(\".message-lose\");\n    const winMessage = document.querySelector(\".message-win\");\n    const startMessage = document.querySelector(\".message-start\");\n    loseMessage.classList.add(\"hidden\");\n    winMessage.classList.add(\"hidden\");\n    startMessage.classList.add(\"hidden\");\n    if (s === \"win\") winMessage.classList.remove(\"hidden\");\n    else if (s === \"lose\") loseMessage.classList.remove(\"hidden\");\n    else if (s === \"start\") startMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$moveHandler() {\n    $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.checkWin()) {\n        $09e991522ca7e64e$var$updateMessage(\"win\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n    } else if (!$09e991522ca7e64e$var$game.hasValidMoves()) {\n        $09e991522ca7e64e$var$updateMessage(\"lose\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n    }\n}\nfunction $09e991522ca7e64e$var$handleKeyDown(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$moveHandler();\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    if ($09e991522ca7e64e$var$startButton) $09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n    $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game.getState());\n});\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$updateMessage(\"start\");\n    $09e991522ca7e64e$var$updateScore(0);\n    const startMessage = document.querySelector(\".message-start\");\n    startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.removeEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n    $09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$restartGame);\n    const button = document.querySelector(\".button.start\");\n    if (button) {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.reset();\n    $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$updateMessage(\"start\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    $09e991522ca7e64e$var$startButton.removeEventListener(\"click\", $09e991522ca7e64e$var$restartGame);\n    $09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n    const button = document.querySelector(\".button.restart\");\n    if (button) {\n        button.classList.remove(\"restart\");\n        button.classList.add(\"start\");\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n}\n\n\n//# sourceMappingURL=index.9336abc7.js.map\n","'use strict';\n\nimport Game from './../modules/Game.class';\n\nconst game = new Game();\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst gameBoardElement = document.getElementById('game-board');\n\nfunction updateScore(score) {\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = `${score}`;\n}\n\nfunction renderBoard(board) {\n  gameBoardElement.innerHTML = '';\n\n  board.forEach((row) => {\n    const rowElement = document.createElement('tr');\n\n    rowElement.classList.add('row');\n\n    row.forEach((cell) => {\n      const cellElement = document.createElement('td');\n\n      cellElement.classList.add('cell');\n      cellElement.textContent = cell !== 0 ? cell : '';\n      rowElement.appendChild(cellElement);\n    });\n\n    gameBoardElement.appendChild(rowElement);\n  });\n\n  updateTileStyles(board);\n}\n\nfunction updateTileStyles(board) {\n  const cells = document.querySelectorAll('.cell');\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = cells[rowIndex * 4 + colIndex];\n\n      cell.className = 'cell';\n\n      if (value > 0) {\n        cell.classList.add(`cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n  });\n}\n\nfunction updateMessage(s) {\n  const loseMessage = document.querySelector('.message-lose');\n  const winMessage = document.querySelector('.message-win');\n  const startMessage = document.querySelector('.message-start');\n\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  startMessage.classList.add('hidden');\n\n  if (s === 'win') {\n    winMessage.classList.remove('hidden');\n  } else if (s === 'lose') {\n    loseMessage.classList.remove('hidden');\n  } else if (s === 'start') {\n    startMessage.classList.remove('hidden');\n  }\n}\n\nfunction moveHandler() {\n  renderBoard(game.getState());\n  scoreDisplay.textContent = game.getScore();\n\n  if (game.checkWin()) {\n    updateMessage('win');\n    document.removeEventListener('keydown', handleKeyDown);\n  } else if (!game.hasValidMoves()) {\n    updateMessage('lose');\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n}\n\nfunction handleKeyDown(e) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n  moveHandler();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  if (startButton) {\n    startButton.addEventListener('click', startGame);\n  }\n\n  renderBoard(game.getState());\n});\n\nfunction startGame() {\n  game.start();\n  renderBoard(game.getState());\n  scoreDisplay.textContent = game.getScore();\n  updateMessage('start');\n  updateScore(0);\n\n  const startMessage = document.querySelector('.message-start');\n\n  startMessage.classList.add('hidden');\n\n  startButton.textContent = 'Restart';\n  startButton.removeEventListener('click', startGame);\n  startButton.addEventListener('click', restartGame);\n\n  const button = document.querySelector('.button.start');\n\n  if (button) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n  }\n\n  document.addEventListener('keydown', handleKeyDown);\n}\n\nfunction restartGame() {\n  game.reset();\n  renderBoard(game.getState());\n  scoreDisplay.textContent = game.getScore();\n  updateMessage('start');\n  startButton.textContent = 'Start';\n\n  startButton.removeEventListener('click', restartGame);\n  startButton.addEventListener('click', startGame);\n\n  const button = document.querySelector('.button.restart');\n\n  if (button) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n  }\n\n  document.addEventListener('keydown', handleKeyDown);\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.board.length; i++) {\n      for (let j = 0; j < this.board[i].length; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.board[row][col] = Math.random() < 0.1 ? 4 : 2;\n    }\n  }\n\n  checkWinCondition() {\n    for (const row of this.board) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n  }\n\n  checkLoseCondition() {\n    for (const row of this.board) {\n      if (row.includes(0)) {\n        return;\n      }\n    }\n\n    for (let i = 0; i < this.board.length; i++) {\n      for (let j = 0; j < this.board[i].length - 1; j++) {\n        if (this.board[i][j] === this.board[i][j + 1]) {\n          return;\n        }\n      }\n    }\n\n    for (let j = 0; j < this.board[0].length; j++) {\n      for (let i = 0; i < this.board.length - 1; i++) {\n        if (this.board[i][j] === this.board[i + 1][j]) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const currentRow = [...this.board[row]];\n      let newRow = currentRow.filter((value) => value !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (currentRow.toString() !== newRow.toString()) {\n        moved = true;\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkWinCondition();\n    this.checkLoseCondition();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const currentRow = [...this.board[row]];\n      let newRow = currentRow.filter((value) => value !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i - 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      if (currentRow.toString() !== newRow.toString()) {\n        moved = true;\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkWinCondition();\n    this.checkLoseCondition();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [\n        this.board[0][col],\n        this.board[1][col],\n        this.board[2][col],\n        this.board[3][col],\n      ];\n\n      const oldColumn = [...column];\n      let newColumn = column.filter((value) => value !== 0);\n\n      for (let i = 0; i < newColumn.length - 1; i++) {\n        if (newColumn[i] === newColumn[i + 1]) {\n          newColumn[i] *= 2;\n          this.score += newColumn[i];\n          newColumn[i + 1] = 0;\n        }\n      }\n\n      newColumn = newColumn.filter((value) => value !== 0);\n\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n\n      if (oldColumn.toString() !== newColumn.toString()) {\n        moved = true;\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkWinCondition();\n    this.checkLoseCondition();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [\n        this.board[0][col],\n        this.board[1][col],\n        this.board[2][col],\n        this.board[3][col],\n      ];\n\n      let newColumn = column.filter((value) => value !== 0);\n\n      for (let i = newColumn.length - 1; i > 0; i--) {\n        if (newColumn[i] === newColumn[i - 1]) {\n          newColumn[i] *= 2;\n          this.score += newColumn[i];\n          newColumn[i - 1] = 0;\n        }\n      }\n\n      newColumn = newColumn.filter((value) => value !== 0);\n\n      while (newColumn.length < 4) {\n        newColumn.unshift(0);\n      }\n\n      const oldColumn = [\n        this.board[0][col],\n        this.board[1][col],\n        this.board[2][col],\n        this.board[3][col],\n      ];\n\n      if (oldColumn.toString() !== newColumn.toString()) {\n        moved = true;\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkWinCondition();\n    this.checkLoseCondition();\n  }\n\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  reset() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  hasValidMoves() {\n    if (this.board.some((row) => row.includes(0))) {\n      return true;\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const value = this.board[row][col];\n\n        if (col < 3 && value === this.board[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && value === this.board[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      if (this.board[row].includes(2048)) {\n        this.status = 'won';\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","board","score","status","getScore","getState","getStatus","start","addRandomTile","emptyCells","i","length","j","push","row","col","randomIndex","Math","floor","random","checkWinCondition","includes","checkLoseCondition","moveLeft","moved","currentRow","newRow","filter","value","toString","moveRight","unshift","moveUp","column","oldColumn","newColumn","moveDown","restart","reset","hasValidMoves","some","checkWin","__esModule","default","$09e991522ca7e64e$var$scoreDisplay","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$gameBoardElement","getElementById","$09e991522ca7e64e$var$renderBoard","innerHTML","forEach","rowElement","createElement","classList","add","cell","cellElement","textContent","appendChild","$09e991522ca7e64e$var$updateTileStyles","cells","querySelectorAll","rowIndex","colIndex","className","$09e991522ca7e64e$var$updateMessage","s","loseMessage","winMessage","startMessage","remove","$09e991522ca7e64e$var$handleKeyDown","e","key","removeEventListener","$09e991522ca7e64e$var$startGame","scoreElement","addEventListener","$09e991522ca7e64e$var$restartGame","button"],"version":3,"file":"index.9336abc7.js.map"}